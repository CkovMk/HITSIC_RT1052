#include <rte_senior.hpp>

/*
----------I2C peripheral----------
*/
/*

rte_i2c_master_t rte_i2c1;

status_t rte_i2c_init(void)
{
    status_t rStatus = kStatus_Success;

    //IOMUXC_SetPinMux(IOMUXC_GPIO_AD_B1_00_LPI2C1_SCL,1);
    //IOMUXC_SetPinMux(IOMUXC_GPIO_AD_B1_01_LPI2C1_SDA,1);

    IOMUXC_SetPinConfig(IOMUXC_GPIO_AD_B1_00_LPI2C1_SCL, 0xD8B0);
    IOMUXC_SetPinConfig(IOMUXC_GPIO_AD_B1_01_LPI2C1_SDA, 0xD8B0);

    CLOCK_SetMux(kCLOCK_Lpi2cMux, RTE_I2C_CLKSRC_SELECT);
    CLOCK_SetDiv(kCLOCK_Lpi2cDiv, RTE_I2C_CLKSRC_DIVIDER);

    lpi2c_master_config_t i2c1_cfg;
    LPI2C_MasterGetDefaultConfig(&i2c1_cfg);
    i2c1_cfg.baudRate_Hz = RTE_I2C1_BAUD;
    rStatus = rte_i2c1.setup(RTE_I2C1_ADDR, &i2c1_cfg, RTE_I2C_CLKFREQ);
    rte_i2c1.initFlag = true;
    return rStatus;
}

status_t rte_i2c_deInit(void)
{
    status_t rStatus = kStatus_Success;
    rStatus = rte_i2c1.deInit();
    return rStatus;
}
*/
/*
----------SPI peripheral----------
*/


status_t rte_spi_init(void)
{
    status_t rStatus = kStatus_Success;

    lpspi_master_config_t spi_cfg;
    /*Master config*/
    {
        spi_cfg.baudRate = 10000000;
        spi_cfg.bitsPerFrame = 8;
        spi_cfg.cpol = kLPSPI_ClockPolarityActiveHigh;
        spi_cfg.cpha = kLPSPI_ClockPhaseFirstEdge;
        spi_cfg.direction = kLPSPI_MsbFirst;

        spi_cfg.pcsToSckDelayInNanoSec = 1000000000 / spi_cfg.baudRate;
        spi_cfg.lastSckToPcsDelayInNanoSec = 1000000000 / spi_cfg.baudRate;
        spi_cfg.betweenTransferDelayInNanoSec = 1000000000 / spi_cfg.baudRate;

        spi_cfg.whichPcs = kLPSPI_Pcs0;
        spi_cfg.pcsActiveHighOrLow = kLPSPI_PcsActiveLow;

        spi_cfg.pinCfg = kLPSPI_SdiInSdoOut;
        spi_cfg.dataOutConfig = kLpspiDataOutRetained;
    }
    LPSPI_MasterInit(LPSPI4, &spi_cfg, RTE_SPI_CLKFREQ);

    return rStatus;
}

status_t rte_spi_deInit(void)
{
    status_t rStatus = kStatus_Success;
    LPSPI_Deinit(LPSPI4);
    return rStatus;
}

/*
----------UART peripheral----------
*/


status_t rte_uart_init(void)
{
    status_t rStatus = kStatus_Success;
    lpuart_config_t uart_cfg;
    LPUART_GetDefaultConfig(&uart_cfg);
    {
    	uart_cfg.baudRate_Bps = 1152000;

    	uart_cfg.txFifoWatermark = 0;
    	uart_cfg.rxFifoWatermark = 1;

    	uart_cfg.enableTx = true;
    	uart_cfg.enableRx = true;
    }
    uart_cfg.baudRate_Bps = RTE_UART_DBUG_BAUD;
    rStatus = LPUART_Init(LPUART1,&uart_cfg,RTE_UART_CLKFREQ);

    uart_cfg.baudRate_Bps = RTE_UART_WLAN_BAUD;
    rStatus = LPUART_Init(LPUART4,&uart_cfg,RTE_UART_CLKFREQ);

    uart_cfg.baudRate_Bps = RTE_UART_INTC_BAUD;
    rStatus = LPUART_Init(LPUART5,&uart_cfg,RTE_UART_CLKFREQ);

    return rStatus;
}
status_t rte_uart_deInit(void)
{
    status_t rStatus = kStatus_Success;
    //rStatus = rte_uart1.deInit();
    return rStatus;
}

/*
----------CSI peripheral----------
*/

//csi_handle_t rte_csi_xferHandle;

//std::vector<gnc_rgbCamImg_t> rte_csi_xferQue = std::vector<gnc_rgbCamImg_t>(CSI_DRIVER_QUEUE_SIZE);

status_t rte_csi_init(void)
{
    status_t rStatus = kStatus_Success;

    csi_config_t csi_cfg;
    {
        csi_cfg.width = 640;
        csi_cfg.height = 400;
        csi_cfg.polarityFlags = kCSI_VsyncActiveHigh | kCSI_HsyncActiveHigh | kCSI_DataLatchOnFallingEdge;
        csi_cfg.bytesPerPixel = 3;
        csi_cfg.linePitch_Bytes;
        csi_cfg.workMode = kCSI_GatedClockMode;
        csi_cfg.dataBus = kCSI_DataBus8Bit;
        csi_cfg.useExtVsync = false;
    }

    rStatus = CSI_Init(RTE_CSI_ADDR, &csi_cfg);
/*  These shoule move to drv layer  */ 
    // rStatus = CSI_TransferCreateHandle(RTE_CSI_ADDR,&rte_csi_xferHandle,rte_csi_xferCallbackFunc,NULL);
    // for(uint23_t i=0;i<CSI_DRIVER_QUEUE_SIZE;i++)
    // {
    //     rStatus = CSI_TransferSubmitEmptyBuffer(RTE_CSI_ADDR,&rte_csi_xferHandle,(uint32_t)(&rte_csi_xferQue[i].pix));
    // }

    
}
status_t rte_csi_deInit(void)
{
    status_t rStatus = kStatus_Success;
    CSI_Deinit(RTE_CSI_ADDR);
    return rStatus;
}


/*  move to drv layer  */
// void rte_csi_xferCallbackFunc(CSI_Type *base, csi_handle_t *handle, status_t status, void *userData)
// {

// }


/*
----------SDHC peripheral----------
*/
